router.post("/order", async (req, res) => {
  const { paymethod } = req.body;
  const user = req.session.user;
  const checkid = req.session.checkoutid;
  const addressid = req.session.deliveryaddress;
  const checkout = await Checkout.findById({ _id: checkid });
  const items = checkout.items.slice();
  const bill = checkout.bill;
  const address = checkout.address;

  let totalPrice;
  let offerPrice;
  let total;
  totalPrice = checkitems.items[0].price;


  offerPrice = checkitems.items[0].discountPrize;
    if(typeof offerPrice ==='undefined'){
       offerPrice=0
       console.log('offprice',offerPrice);
        total = totalPrice + deliveryCharge + packagingCharge;
    }else{
  
      offerPrice = checkitems.items[0].discountPrize;
      console.log('offprice',offerPrice);
      total = offerPrice + deliveryCharge + packagingCharge;
    }

  const order = await Order.create({
    user: user,
    items: items,
    checkoutid: checkid,
    bill: bill,
    address: addressid,
    paymentStatus: "pending",
    paymentType: paymethod,
    orderStatus: [{ type: "ordered", date: new Date() }],
  });
  req.session.orderid = order._id;
  const orderid= order._id;
  const deleteCheck = await Checkout.findOneAndDelete({user:user})
  console.log('session=',req.session.checkoutType)
  if(req.session.checkoutType==='cart'){
    const deleteCart = await Cart.findOneAndDelete({user:user})
  }
  if (paymethod === "cod") {
    req.flash('success','Ordered Successfully')
    return res.json({cod:true})
    //return res.redirect("/product/ordercompletion");
    //return res.render('products/ordersuccess',)
  } else {

    const instance = new Razorpay({
      key_id: 'rzp_test_hMqwAizfgv8cdG',
      key_secret: 'XQdXOfEmvhHXaDI44N82gLrK',
    });
  
    let options = {
      amount: bill*100,  // amount in the smallest currency unit
      currency: "INR",
      receipt: `${order._id}`
    };
    instance.orders.create(options, function(err, order) {
      if(err){
        res.send(err)
      }else{

          console.log(order)
          res.json({order});
      }
    });

    
  }
});

router.post('/verifypayment',async(req,res,next)=>{
  try{

    console.log('verify',req.body);
    const {payment,order}= req.body;
     let hmac = crypto.createHmac('sha256','XQdXOfEmvhHXaDI44N82gLrK')
    hmac.update(payment.razorpay_order_id+'|'+payment.razorpay_payment_id)
    hmac =hmac.digest('hex')
    if(hmac===payment.razorpay_signature){
      console.log('payment success');
      const updatePayStatus = await Order.findOneAndUpdate({_id:order.receipt},{paymentStatus:'completed'})
      res.json({success:true})
    }
    else{
      res.json({success:false})
    }
    //res.send(req.body)
  } catch(e){
    next(e);
  }
})

router.post('/onlinepay',async(req,res,next)=>{

  
  const online = 'online';
  res.send({online})
})

router.get("/ordercompletion", async (req, res) => {
  const orderid = req.session.orderid;
  const user = req.session.user;
  const order = await Order.find({ user: user }).populate({
    path: "items",
    populate: { path: "product" },
  }).sort({createdAt:-1});
  console.log("address==", order.address);
  console.log('order=',order)
  const product = order.items;
  
  res.render("products/ordercompletion", { order });
});

router.post('/coupon',async(req,res,next)=>{
  console.log(req.body);
  const {code,proid} = req.body;
  const ucode =code.toUpperCase();
  const checkcode = await Coupon.aggregate([{$match:{code:ucode}}])
  console.log(checkcode.length);
  let offerPrice=false;
  let isVerified;
  if(checkcode.length>0){
     isVerified=true;
    const product = await Product.findById({_id:proid});
    let itemPrice = product.price;
    console.log('pro',product);
    const percentage = checkcode[0].percentage;
    const maxamount = checkcode[0].amount;
    
        if(checkcode[0].isPercent){
          const percentValue =(percentage/100)*itemPrice;
          const numberValue = itemPrice-maxamount;
            if(percentValue<numberValue){
              offerPrice=numberValue;
              console.log('numbervalue=',offerPrice);
              
            }else{
              offerPrice = percentValue;
              console.log('percentValue=',offerPrice);
            }
        }
        else{

          const numberValue = itemPrice-maxamount;
          console.log('only number offer=',numberValue);
        }

  }
  else{
    isVerified=false;
    offerPrice=false;
  }
  console.log('offerprice here',offerPrice)
  
  res.json({code:code,offerPrice,isVerified})
})


router.delete('/order/:id',async(req,res,next)=>{
  const {id} = req.params;
  console.log('del id=',id);
  const checkshipped = await Order.findById(id);
  console.log('order=',checkshipped.orderStatus[0].type)
  if(checkshipped.orderStatus[0].type==='ordered'){
    const deleteorder = await Order.findByIdAndDelete(id);
    return res.redirect('/product/ordercompletion');
  }
  else{
    req.flash('error','Item has already shipped');
    return res.redirect('/product/ordercompletion');
  }  
})

router.get("/:id", async (req, res) => {
  const { id } = req.params;
  const userId = req.session.user;
  const product = await Product.findById(id);
  const allProducts = await Product.find({});
  res.render("products/show", { product, userId, allProducts });
});

module.exports = router;
